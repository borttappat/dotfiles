set $mod Mod4
font cozette 8

# Autostart 
exec --no-startup-id picom -b
exec_always --no-startup-id wal -R
exec_always --no-startup-id ~/.dotfiles/nixos/launch.sh
exec --no-startup-id ~/.config/i3/scripts/startup.sh
# exec --no-startup-id alacritty
  

# Cycle wallpapers and apply new colorscheme.
bindsym $mod+Shift+w exec "wal -i $HOME/Wallpapers -o wal-set"

# Launch Librewolf
bindsym $mod+b exec librewolf

# Launch ranger
#bindsym $mod+shift+h exec alacritty "ranger"


# Set keyboard backlight to 100
# bindsym $mod+F8 exec "sudo light -Srs "sysfs/leds/asus::kbd_backlight" 100" 
bindsym $mod+F8 exec "brightnessctl set 80%"

# Set keyboard backlight to 20
bindsym $mod+F7 exec "brightnessctl set 20%" 
# exec "sudo light -Srs "sysfs/leds/asus::kbd_backlight" 20"


floating_modifier $mod

# Start a terminal
bindsym $mod+Return exec alacritty

# Kill focused window
bindsym $mod+q kill

# Start rofi
# bindsym $mod+d exec --no-startup-id "rofi -modi drun,run -show drun -font"

bindsym $mod+d exec --no-startup-id rofi -show run -font "cozette 8"

# Window focus keys
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# Split in horizontal orientation
bindsym $mod+c split v

# Split in vertical orientation
bindsym $mod+v split h

# Enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# Toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# Change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle


# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# Switch to workspace
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

# Move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10

# i3 commands

# Reload the configuration file
bindsym $mod+Shift+c reload
# Restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart


# Resizing
bindsym $mod+r mode "resize"
# Resize window (you can also use the mouse for that)
mode "resize" {
bindsym l resize shrink width 15 px or 15 ppt
bindsym k resize grow height 15 px or 15 ppt
bindsym j resize shrink height 15 px or 15 ppt
bindsym h resize grow width 15 px or 15 ppt

# Same bindings, but for the arrow keys
bindsym Left resize shrink width 2 px or 2 ppt
bindsym Up resize grow height 2 px or 2 ppt
bindsym Down resize shrink height 2 px or 2 ppt
bindsym Right resize grow width 2 px or 2 ppt

# Back to normal: Enter or Escape or $mod+r
bindsym Return mode "default"
bindsym Escape mode "default"
bindsym $mod+r mode "default"
}


# Hiding window title
for_window [class="^.*"] border pixel 0

# Window border
##for_window [class="^.*"] border pixel 10 #FF0000
#default_border pixel 3
#client.focused          #4c7899 #285577 #ffffff #2e9ef4   #285577


# Gaps
gaps inner 8
gaps outer 1

# Smart gaps
# Only enable gaps on a workspace when there is at least one container
smart_gaps on

# Controlling gap sizes
bindsym $mod+Shift+Up gaps inner current plus 2
bindsym $mod+Shift+Down gaps inner current minus 2

# Only enable outer gaps when there is exactly one container
smart_gaps inverse_outer


# Activate smart borders (always)
smart_borders on

# Activate smart borders (only when there are effectively no gaps)
smart_borders no_gaps

